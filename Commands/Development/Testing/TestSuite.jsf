try {
  fw.runScript(fw.appJsCommandsDir + '/bs.js');
} catch(e) { alert(e.toSource()); };

/*
  DONE:
  - output test log to file
  - open a blank document before we start
    - newdoc = fw.createFireworksDocument(size, res, backgroundColor);

  TODO:
  - use test files for heavyweight stuff (400 elements resize, 6000x6000 canvas...)
    - fw.openDocument(fileURL string or array);
  - test text-box vertical resizing
  - test all commands
*/


// we need an empty document to start running tests
var empty_doc = fw.createFireworksDocument({x:400,y:400}, {pixelsPerUnit:72, units:"inch"}, '#ffffff00'),
    oc_folder = 'file:///Macintosh%20HD/Users/ale.munoz/Documents/Code/Fireworks';

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// bstest
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var test_document,
    asserts = 0,
    ok = 0,
    fail = 0,
    test_output = "";

function log(msg){
  // test_output += '\n' + msg + ' (' + new Date() + ')';
  test_output += '\n' + msg;
}

// General setup
function add_rectangle(){
  fw.getDocumentDOM().addNewRectanglePrimitive({left:0, top:0, right:100, bottom:100}, 0);
  fw.getDocumentDOM().setBrushNColor(null, "#ffffff00");
}

// Test init
function assert(desc, expression, thing, expected) {
  try {
    test_output += "- " + desc + ": ";
    asserts++;
    if ((expression)) {
      ok++;
      test_output += "OK.\n";
    } else {
      fail++;
      test_output += 'FAIL.';
      if (thing != null) {
        test_output += ' Got ' + thing + ', expected ' + expected;
      };
      test_output += '\n';
    }
    fw.copy(test_output + '\n' + fw.appName + ": " + asserts + ' asserts, ' + ok + ' ok, ' + fail + ' failed. Test run in ' + (new Date() - start_time) + ' ms.');
  } catch (exception) {
    alert([exception, exception.lineNumber, exception.fileName].join("\n"));
  }
}
function assert_equal(desc,thing,expected){
  assert(desc, thing === expected, thing, expected);
}
function assert_not_equal(desc,first,second){
  // special check for arrays
  if (second !== undefined) {
    if ((first.constructor == [].constructor) && (second.constructor == [].constructor)) {
      first = first.toString();
      second = second.toString();
    };
  }
  assert(desc, first !== second);
}
function assert_is_defined(desc, thing) {
  assert_not_equal(desc, thing, undefined);
}
function assert_is_number(desc, thing) {
  assert(desc, thing.constructor === new Number().constructor );
}

// redefine fw.browseForFolderURL
fw.browseForFolderURL = function(){
  return prompt_folder;
};

function setup() {
  test_document = fw.createFireworksDocument({x:400,y:400}, {pixelsPerUnit:72, units:"inch"}, '#ffffff00');
  add_rectangle();
}
function teardown() {
  fw.closeDocument(test_document,false);
}
function test(what,f) {
  try {
    scenario = what;
    test_output += '\n' + what + '\n';
    setup();
    f.call();
    teardown();
  } catch (exception) {
    alert([exception, exception.lineNumber, exception.fileName].join("\n"));
  }
}
function xtest(what,f){ };


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Start test
log('Running TestSuite in ' + fw.appName);

var start_time = new Date();

test('Test Suite runs setup', function(){
  assert_equal( 'There is one item created and selected', fw.selection.length, 1);
});
// Fails in CS6?
//assert_equal('Test Suite runs teardown', fw.selection.length,0);


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// API
test('Array extensions are defined', function(){
  assert_equal( 'Array.clone is defined', typeof(fw.selection.clone), "function" );
  assert_equal( 'Array.each is defined', typeof(fw.selection.each), "function" );
  assert_equal( 'Array.each_with_index is defined', typeof(fw.selection.each_with_index), "function" );
  assert_equal( 'Array.is_group is defined', typeof(fw.selection[0].is_group), "function" );
  assert_equal( 'Number.times is defined', typeof((5).times), "function" );
  assert_equal( 'Array.each_in_group is defined', typeof(fw.selection[0].each_in_group), 'function');
});

test('Array extensions work', function(){
  var a     = [0,1,2,3,4,5,6,7,8,9],
      count = 0;

  a.each(function(p){
    count++;
  });

  assert_equal( 'Array.each works', count, a.length );

  count = 0;
  a.each_with_index(function(p,index){
    count += index;
  });
  assert_equal( 'Array.each_with_index works', count, 9+8+7+6+5+4+3+2+1 );

  var b = a.clone();
  assert_equal('Array.clone works',b[4],4);
});


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Align
test('Align commands: Center', function(){


  fw.getDocumentDOM().selectAll();
  fw.selection[0].left = 100 * Math.random();
  fw.selection[0].top = 100 * Math.random();
  orangecommands.run('Align', 'Center on Canvas - Horizontal');
  assert_equal('Object is centered horizontally', fw.selection[0].left, 150);


  fw.getDocumentDOM().selectAll();
  fw.selection[0].left = 100 * Math.random();
  fw.selection[0].top = 100 * Math.random();
  orangecommands.run('Align', 'Center on Canvas - Vertical');
  assert_equal('Object is centered vertically', fw.selection[0].top, 150);

  fw.getDocumentDOM().selectAll();
  fw.selection[0].left = 100 * Math.random();
  fw.selection[0].top = 100 * Math.random();
  orangecommands.run('Align', 'Center on Canvas - Both');
  assert_equal('Object is centered horizontally', fw.selection[0].left, 150);
  assert_equal('Object is centered vertically', fw.selection[0].top, 150);

  fw.getDocumentDOM().addNewText({left:0, top:0, right:100, bottom:20}, true);
  fw.getDocumentDOM().setTextRuns({ initialAttrs:{ alignment:"center", antiAliasSharpness:192, antiAliasStrength:64, baselineShift:0, bold:false, face:"Arial", fillColor:"#666666", horizontalScale:1, italic:false, leading:1, leadingMode:"percentage", overSample:8, paragraphIndent:0, paragraphSpacingAfter:0, paragraphSpacingBefore:0, rangeKerning:0, size:"10pt", underline:false }, textRuns:[ { changedAttrs:{  }, characters:"fafdsfadsfasdfads" } ] });
  orangecommands.run('Select','Text Objects');
  orangecommands.run('Align', 'Center on Canvas - Horizontal');
  assert_equal('Text box is centered horizontally', Selection.left(), Math.round(fw.getDocumentDOM().width/2 - Selection.width()/2));
  orangecommands.run('Align', 'Center on Canvas - Vertical');
  assert_equal('Text box is centered vertically', Selection.top(), Math.round(fw.getDocumentDOM().height/2 - Selection.height()/2));

  fw.selection[0].left = 100 * Math.random();
  fw.selection[0].top = 100 * Math.random();
  orangecommands.run('Align', 'Center on Canvas - Both');
  assert('Text box is centered in both directions', (Selection.left() == Math.round(fw.getDocumentDOM().width/2 - Selection.width()/2)) && (Selection.top() == Math.round(fw.getDocumentDOM().height/2 - Selection.height()/2)));

});

test('Align commands: Space', function(){

  (3).times(add_rectangle);
  fw.getDocumentDOM().selectAll();
  orangecommands.run('Align','Space Horizontal', 10);
  assert_equal('Elements are spaced horizontally',Selection.width(),430);
  fw.getDocumentDOM().selectAll();
  orangecommands.run('Align','Space Vertical', 10);
  assert_equal('Elements are spaced vertically',Selection.height(),430);

});


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Alpha
test('Alpha commands', function(){
  // This is a *very* bad test, but that's just because Fireworks does some funky stuff with opacity...
  orangecommands.run("Alpha","Alpha 10");
  assert_equal( 'Alpha 10 works', Math.round(fw.selection[0].opacity),10);
  orangecommands.run("Alpha","Alpha 20");
  assert_equal( 'Alpha 20 works', Math.round(fw.selection[0].opacity),20);
  orangecommands.run("Alpha","Alpha 30");
  assert_equal( 'Alpha 30 works', Math.round(fw.selection[0].opacity),30);
  orangecommands.run("Alpha","Alpha 40");
  assert_equal( 'Alpha 40 works', Math.round(fw.selection[0].opacity),40);
  orangecommands.run("Alpha","Alpha 50");
  assert_equal( 'Alpha 50 works', Math.round(fw.selection[0].opacity),50);
  orangecommands.run("Alpha","Alpha 60");
  assert_equal( 'Alpha 60 works', Math.round(fw.selection[0].opacity),60);
  orangecommands.run("Alpha","Alpha 70");
  assert_equal( 'Alpha 70 works', Math.round(fw.selection[0].opacity),70);
  orangecommands.run("Alpha","Alpha 80");
  assert_equal( 'Alpha 80 works', Math.round(fw.selection[0].opacity),80);
  orangecommands.run("Alpha","Alpha 90");
  assert_equal( 'Alpha 90 works', Math.round(fw.selection[0].opacity),90);
  orangecommands.run("Alpha","Alpha 100");
  assert_equal( 'Alpha 100 works', Math.round(fw.selection[0].opacity),100);
});
test('Alpha Stroke', function() {
  orangecommands.run('Color', 'Stroke Color', '#fc0');
  assert_equal('Alpha Stroke is 100', fw.selection[0].pathAttributes.brush.concentration, 100);
  orangecommands.run('Alpha', 'Stroke Alpha 10');
  assert_equal('Alpha Stroke is 10', fw.selection[0].pathAttributes.brush.concentration, 10);
  orangecommands.run('Alpha', 'Stroke Alpha 20');
  assert_equal('Alpha Stroke is 20', fw.selection[0].pathAttributes.brush.concentration, 20);
  orangecommands.run('Alpha', 'Stroke Alpha 30');
  assert_equal('Alpha Stroke is 30', fw.selection[0].pathAttributes.brush.concentration, 30);
  orangecommands.run('Alpha', 'Stroke Alpha 40');
  assert_equal('Alpha Stroke is 40', fw.selection[0].pathAttributes.brush.concentration, 40);
  orangecommands.run('Alpha', 'Stroke Alpha 50');
  assert_equal('Alpha Stroke is 50', fw.selection[0].pathAttributes.brush.concentration, 50);
  orangecommands.run('Alpha', 'Stroke Alpha 60');
  assert_equal('Alpha Stroke is 60', fw.selection[0].pathAttributes.brush.concentration, 60);
  orangecommands.run('Alpha', 'Stroke Alpha 70');
  assert_equal('Alpha Stroke is 70', fw.selection[0].pathAttributes.brush.concentration, 70);
  orangecommands.run('Alpha', 'Stroke Alpha 80');
  assert_equal('Alpha Stroke is 80', fw.selection[0].pathAttributes.brush.concentration, 80);
  orangecommands.run('Alpha', 'Stroke Alpha 90');
  assert_equal('Alpha Stroke is 90', fw.selection[0].pathAttributes.brush.concentration, 90);
  orangecommands.run('Alpha', 'Stroke Alpha 100');
  assert_equal('Alpha Stroke is 100', fw.selection[0].pathAttributes.brush.concentration, 100);
  orangecommands.run('Alpha', 'Stroke Alpha To', 42);
  assert_equal('Alpha Stroke is 42', fw.selection[0].pathAttributes.brush.concentration, 42);
});


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Canvas
test('Canvas', function(){
  orangecommands.run("Canvas","Canvas Width", 110);
  assert_equal('Canvas Width is 110', fw.getDocumentDOM().width, 110);
  orangecommands.run("Canvas","Canvas Height", 110);
  assert_equal('Canvas Height is 110', fw.getDocumentDOM().height, 110);
  orangecommands.run("Canvas","Canvas Size",'100,100');
  assert_equal('Canvas Size sets Width', fw.getDocumentDOM().width, 100);
  assert_equal('Canvas Size sets Height', fw.getDocumentDOM().height, 100);
});


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Color
test('Color',function(){
  orangecommands.run('Color','Canvas Color', '#00ff00');
  assert_equal('Canvas Color sets color', fw.getDocumentDOM().backgroundColor,'#00ff00');
  orangecommands.run('Color','Fill Color', '#00ff00');
  assert_equal('Fill Color sets Color', fw.selection[0].pathAttributes.fillColor,'#00ff00');
  orangecommands.run('Color','Stroke Color', '#00ff00');
  assert_equal('Fill Color sets Stroke', fw.selection[0].pathAttributes.brushColor,'#00ff00');
  fw.getDocumentDOM().selectAll();
  fw.getDocumentDOM().group("normal");
  orangecommands.run('Color','Fill Color', '#00ff00');
  Selection.each(function(e){
    assert_equal('Fill Color sets color of elements inside groups', e.pathAttributes.fillColor, '#00ff00');
  });
});


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Effects
// No idea how I should test these, so I just basically run them all and expect Fireworks not to explode
// Bombs in CS3
xtest('Effects: Graphic',function(){
  orangecommands.run('Effects','Lightbox');
  orangecommands.run('Effects','Plastic');
  orangecommands.run('Effects','Reflection', 50);
  orangecommands.run('Effects','Safe Flatten');
});


// Repeat commands can be tested properly
test('Effects: Repeat Horizontal', function(){
  orangecommands.run('Effects', 'Repeat Horizontal', 10);
  fw.getDocumentDOM().selectAll();
  assert_equal('Item is repeated 10 times', fw.selection.length, 11);
  assert_equal('Item is spaced properly', Selection.width(), ((11 * 100) + (10 * 10)));
});
test('Effects: Repeat Vertical', function(){
  orangecommands.run('Effects', 'Repeat Vertical', 10);
  fw.getDocumentDOM().selectAll();
  assert_equal('Item is repeated 10 times', fw.selection.length, 11);
  assert_equal('Item is spaced properly', Selection.height(), ((11 * 100) + (10 * 10)));
});


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Export
xtest('Export: All Pages as PNG24 in',function(){

  orangecommands.run('Pages','Add Page');

  prompt_folder = oc_folder + '/tmp';
  Files.deleteFileIfExisting(prompt_folder);
  Files.createDirectory(prompt_folder);

  orangecommands.run('Export','All Pages as PNG 24 in');
  assert_equal('All pages are exported', Files.enumFiles(prompt_folder).length, 2);

});


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Export Settings
test('Export Settings',function(){
  // TODO: check all pages in multipage document
  orangecommands.run('Export Settings','Set PNG 24 for All Pages');
  assert_equal('PNG is set as export setting for all pages', fw.getDocumentDOM().exportOptions.exportFormat, 'PNG');
});


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Grids


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Guides


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pages
// This test seems to bomb CS3
test('Page commands', function(){
  assert_equal('Document has one page',fw.getDocumentDOM().pagesCount,1);
  orangecommands.run('Pages', 'Add Page');
  assert_equal('A page is added when running the Add Page command',fw.getDocumentDOM().pagesCount,2);
  orangecommands.run('Pages', 'Duplicate Current');
  assert_equal('A page is added when running the Duplicate Current command',fw.getDocumentDOM().pagesCount,3);
});

// Position
test('Position',function(){
  fw.selection[0].left = 100.2;
  fw.selection[0].top = 100.2;
  orangecommands.run('Position','Fix Position');
  assert_equal('Element x position is rounded', fw.selection[0].left, 100);
  assert_equal('Element y position is rounded', fw.selection[0].top, 100);

  orangecommands.run('Position','Set Position', '100,100');
  assert_equal('Element is moved to x position', fw.selection[0].left, 100);
  assert_equal('Element is moved to y position', fw.selection[0].top, 100);

  // Math operations
  orangecommands.run('Position','Set Position','100*2,100');
  assert_equal('set_position works with maths operations', fw.selection[0].left, 200);

  // Objects with border
  fw.getDocumentDOM().setBrushNColor({ alphaRemap:"none", angle:0, antiAliased:true, aspect:100, blackness:0, category:"bc_Pencil", concentration:100, dashOffSize1:2, dashOffSize2:2, dashOffSize3:2, dashOnSize1:8, dashOnSize2:1, dashOnSize3:1, diameter:24, feedback:"brush", flowRate:0, maxCount:15, minSize:1, name:"bn_1-Pixel Anti-Aliased", numDashes:0, shape:"circle", softenMode:"bell curve", softness:0, spacing:15, textureBlend:0, textureEdge:0, tipColoringMode:"random", tipCount:1, tipSpacing:0, tipSpacingMode:"random", type:"simple" }, "#000066");
  fw.getDocumentDOM().setBrushPlacement('center');
  orangecommands.run('Position','Set Position', '100,100');
  assert_equal('set_position works properly for objects with border', fw.selection[0].left, 100);

  fw.getDocumentDOM().setBrushPlacement('outside');
  orangecommands.run('Position','Set Position', '100,100');
  assert_equal('set_position works properly for objects with border', fw.selection[0].left, 100);

  fw.getDocumentDOM().setBrushPlacement('inside');
  orangecommands.run('Position','Set Position','100,100');
  assert_equal('set_position works properly for objects with border', fw.selection[0].left, 100);

  // TODO: Position works properly for text objects

  // Position works for bitmap objects
  fw.getDocumentDOM().selectAll();
  fw.getDocumentDOM().flattenSelection();
  orangecommands.run('Position','Set Position', '130,100');
  assert_equal('set_position works properly for bitmaps', fw.selection[0].left, 130);

});

// Properties: DONE
test('Properties',function(){
  orangecommands.run('Properties','Set Rectangle Roundness in Pixels',10);
  var sel = fw.selection[0];
  var border_radius = 0;
  if (sel.roundness) {
    if(sel.mode == 'exact') {
      border_radius = sel.roundness;
    } else {
      border_radius = (sel.roundness * sel.height) / 2;
    }
  };
  assert_equal('Rectangle roundness is set properly', border_radius, 10);
});

// Select
test('Select text objects', function(){
  fw.getDocumentDOM().addNewText({left:0, top:0, right:100, bottom:20}, true);
  fw.getDocumentDOM().setTextRuns({ initialAttrs:{ alignment:"center", antiAliasSharpness:192, antiAliasStrength:64, baselineShift:0, bold:false, face:"Arial", fillColor:"#666666", horizontalScale:1, italic:false, leading:1, leadingMode:"percentage", overSample:8, paragraphIndent:0, paragraphSpacingAfter:0, paragraphSpacingBefore:0, rangeKerning:0, size:"10pt", underline:false }, textRuns:[ { changedAttrs:{  }, characters:"fafdsfadsfasdfads" } ] });
  fw.getDocumentDOM().addNewText({left:0, top:20, right:100, bottom:20}, true);
  fw.getDocumentDOM().setTextRuns({ initialAttrs:{ alignment:"center", antiAliasSharpness:192, antiAliasStrength:64, baselineShift:0, bold:false, face:"Arial", fillColor:"#666666", horizontalScale:1, italic:false, leading:1, leadingMode:"percentage", overSample:8, paragraphIndent:0, paragraphSpacingAfter:0, paragraphSpacingBefore:0, rangeKerning:0, size:"10pt", underline:false }, textRuns:[ { changedAttrs:{  }, characters:"fafdsfadsfasdfads" } ] });

  orangecommands.run('Select','Text Objects');
  assert_equal('Two text boxes are selected', fw.selection.length, 2);
});

// Size
test( 'Size command, single object', function(){
  assert_equal('An item is selected and its width is 100', fw.selection[0].width, 100);
  orangecommands.run("Size","Width +1");
  assert_equal('Selected item is 1 pixel wider', fw.selection[0].width, 101);
  orangecommands.run("Size","Width +10");
  assert_equal('Selected item is 10 pixels wider', fw.selection[0].width, 111);
  orangecommands.run("Size","Height +1");
  assert_equal('Selected item is 1 pixel taller', fw.selection[0].height, 101);
  orangecommands.run("Size","Height +10");
  assert_equal('Selected item is 10 pixels taller', fw.selection[0].height, 111);
  orangecommands.run("Size","Width -1");
  assert_equal('Selected item is 1 pixel narrower', fw.selection[0].width, 110);
  orangecommands.run("Size","Width -10");
  assert_equal('Selected item is 10 pixels narrower', fw.selection[0].width, 100);
  orangecommands.run("Size","Height -1");
  assert_equal('Selected item is 1 pixel shorter', fw.selection[0].height, 110);
  orangecommands.run("Size","Height -10");
  assert_equal('Selected item is 10 pixels shorter', fw.selection[0].height, 100);

  (10).times(add_rectangle);
  fw.getDocumentDOM().selectAll();
  orangecommands.run("Size","Scale to Fit...", "20,20");
  fw.selection.each(function(obj) {
      assert_equal('Selected item height is 20 pixels', obj.height, 20);
      assert_equal('Selected item width is 20 pixels', obj.width, 20);
  });

});

test( 'Size command, multiple objects', function(){
  assert_equal('One item is selected', fw.selection.length,1);
  (30).times(add_rectangle);
  fw.getDocumentDOM().selectAll();
  assert_equal('Multiple items are selected', fw.selection.length, 31);
  orangecommands.run("Size","Width +10");
  assert_equal('Multiple items are 10 pixels wider', Selection.get_bounds().right,110);
  orangecommands.run("Size","Height +10");
  assert_equal('Multiple items are 10 pixels taller', Selection.get_bounds().bottom,110);
});

xtest( 'Size command, multiple objects [STRESS TEST]', function(){
  var max_rects = 599; // 599 work (9205ms), 600 rectangles crash CS5
  assert_equal('One item is selected', fw.selection.length,1);
  (max_rects - 1).times(add_rectangle);
  fw.getDocumentDOM().selectAll();
  assert_equal('Multiple items are selected', fw.selection.length, max_rects);
  orangecommands.run("Size","Width +10");
  assert_equal('Multiple items are 10 pixels wider', Selection.get_bounds().right,110);
  orangecommands.run("Size","Height +10");
  assert_equal('Multiple items are 10 pixels taller', Selection.get_bounds().bottom,110);
});

test( 'Size command, groups', function(){
  (30).times(add_rectangle);
  fw.getDocumentDOM().selectAll();
  fw.getDocumentDOM().group("normal");
  orangecommands.run('Size','Width +10');
  assert_equal('Group is resized',Selection.get_bounds().right,110);
});

test('Text boxes are resized properly', function(){
  // add text boxes
  fw.getDocumentDOM().addNewText({left:0, top:0, right:100, bottom:20}, true);
  fw.getDocumentDOM().setTextRuns({ initialAttrs:{ alignment:"center", antiAliasSharpness:192, antiAliasStrength:64, baselineShift:0, bold:false, face:"Arial", fillColor:"#666666", horizontalScale:1, italic:false, leading:1, leadingMode:"percentage", overSample:8, paragraphIndent:0, paragraphSpacingAfter:0, paragraphSpacingBefore:0, rangeKerning:0, size:"10pt", underline:false }, textRuns:[ { changedAttrs:{  }, characters:"fafdsfadsfasdfads" } ] });
  fw.getDocumentDOM().addNewText({left:0, top:20, right:100, bottom:20}, true);
  fw.getDocumentDOM().setTextRuns({ initialAttrs:{ alignment:"center", antiAliasSharpness:192, antiAliasStrength:64, baselineShift:0, bold:false, face:"Arial", fillColor:"#666666", horizontalScale:1, italic:false, leading:1, leadingMode:"percentage", overSample:8, paragraphIndent:0, paragraphSpacingAfter:0, paragraphSpacingBefore:0, rangeKerning:0, size:"10pt", underline:false }, textRuns:[ { changedAttrs:{  }, characters:"fafdsfadsfasdfads" } ] });

  orangecommands.run('Select','Text Objects');
  assert_equal('Two text boxes exist', fw.selection.length, 2);

  fw.selection.each_with_index(function(textbox,index){
    assert_equal('Text box ' + index + ' is 100 pixels wide', textbox.width, 104); // stupid Fireworks
  });

  // Resize ungrouped
  orangecommands.run('Select','Text Objects');
  orangecommands.run('Size', 'Width +10');
  fw.selection.each_with_index(function(textbox,index){
    assert_equal('Text box ' + index + ' is resized when not grouped', textbox.width, 114); // stupid Fireworks
  });

  // Create a group
  fw.getDocumentDOM().selectAll();
  fw.getDocumentDOM().group("normal");

  orangecommands.run('Select','Text Objects');
  orangecommands.run('Size', 'Width +10');
  fw.selection.each_with_index(function(textbox,index){
    assert_equal('Text box ' + index + ' is resized when grouped', textbox.width, 124); // stupid Fireworks
  },true);
});

// Text
// test('Text commands', function(){
//   
// });


// End test ////////////////////////////////////////////////////////////////////////////
msg = '\n' + fw.appName + ": " + asserts + ' asserts, ' + ok + ' ok, ' + fail + ' failed. Test run in ' + (new Date() - start_time) + ' ms.';
log(msg);

function fix_date(num){
  num = num.toString();
  if (num.length < 2) {
    num = "0" + num;
  };
  return num;
}

var d = new Date();
var year = d.getFullYear();
var month = fix_date((d.getMonth() + 1));
var day = fix_date(d.getDate());
var hour = fix_date(d.getHours());
var minute = fix_date(d.getMinutes());
var seconds = fix_date(d.getSeconds());
var milliseconds = fix_date(d.getMilliseconds());
var folder_name = year + month + day + hour + minute + seconds + milliseconds;

File.create(test_output, oc_folder + '/logs/' + fw.appName.replace(' ','-') + '.txt');
// File.create(test_output, oc_folder + '/logs/test_' + folder_name + '_' + fw.appName.replace(' ','-') + '.txt');

fw.closeDocument(empty_doc,false);


//alert(msg);
